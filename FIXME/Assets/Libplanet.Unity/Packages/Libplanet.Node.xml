<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Libplanet.Node</name>
    </assembly>
    <members>
        <member name="T:Libplanet.Node.BootstrapConfig">
            <summary>
            Various options for a <see cref="T:Libplanet.Net.Swarm`1"/>'s bootstrapping phase.
            </summary>
        </member>
        <member name="P:Libplanet.Node.BootstrapConfig.SeedPeers">
            <summary>
            The list of seed peers to connect to.
            </summary>
        </member>
        <member name="P:Libplanet.Node.BootstrapConfig.SearchDepth">
            <summary>
            Determines the depth of the search when discovering neighbors for the local node.
            </summary>
        </member>
        <member name="P:Libplanet.Node.BootstrapConfig.DialTimeout">
            <summary>
            Determines how long to wait for dial responses during the bootstrapping phase.
            </summary>
        </member>
        <member name="T:Libplanet.Node.InitConfig">
            <summary>
            Various options for initializing a <see cref="T:Libplanet.Net.Swarm`1"/> instance.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.MaxTimeout">
            <summary>
            Hard upper limit on how long to wait for a response when sending messages to peers.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.MinTimeout">
            <summary>
            Hard lower limit on how long to wait for a response when sending messages to peers.
            </summary>
            <remarks>
            Currently unused.
            </remarks>
        </member>
        <member name="P:Libplanet.Node.InitConfig.RoutingTableNumBuckets">
            <summary>
            Determines how many buckets there are for a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.RoutingTableBucketSize">
            <summary>
            Determines the bucket size for each bucket in a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.BlockLocatorIndexSampleThreshold">
            <summary>
            Determines sampling threshold for <see cref="T:Libplanet.Blockchain.BlockLocator"/>s.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.TransportType">
            <summary>
            Determines the type of <see cref="T:Libplanet.Net.Transports.ITransport"/> to use.  Set to
            <see cref="F:Libplanet.Net.SwarmOptions.TransportType.NetMQTransport"/> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.Host">
            <summary>
            Determines the host.  Set to <c>"localhost"</c> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.Port">
            <summary>
            Determines the <em>incoming</em> port.  Set to <c>null</c> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.InitConfig.IceServers">
            <summary>
            The list of <see cref="P:Libplanet.Node.InitConfig.IceServers"/> to use when connecting to the network.
            If <see cref="P:Libplanet.Node.InitConfig.Host"/> is provided, this gets ignored.
            </summary>
        </member>
        <member name="T:Libplanet.Node.NetworkConfig`1">
            <summary>
            A network configuration.
            </summary>
            <typeparam name="T">An <see cref="T:Libplanet.Action.IAction"/> type.  It should match to
            <seealso cref="T:Libplanet.Blockchain.BlockChain`1"/> and <see cref="T:Libplanet.Net.Swarm`1"/>.</typeparam>
        </member>
        <member name="M:Libplanet.Node.NetworkConfig`1.#ctor">
            <summary>
            Initializes a <see cref="T:Libplanet.Node.NetworkConfig`1"/> instance using
            <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/>
            and <see cref="P:Libplanet.Node.NodeUtils`1.DefaultStagePolicy"/>.
            An empty genesis <see cref="T:Libplanet.Blocks.Block`1"/> compliant with
            <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/> is created and signed using
            an ephemeral <see cref="T:Libplanet.Crypto.PrivateKey"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Node.NetworkConfig`1.#ctor(Libplanet.Blockchain.Policies.IBlockPolicy{`0},Libplanet.Blockchain.Policies.IStagePolicy{`0},Libplanet.Blocks.Block{`0})">
            <summary>
            Initializes a <see cref="T:Libplanet.Node.NetworkConfig`1"/> instance using
            <paramref name="blockPolicy"/>, <paramref name="stagePolicy"/>, and
            <paramref name="genesisBlock"/>.
            </summary>
            <param name="blockPolicy">The <see cref="T:Libplanet.Blockchain.Policies.IBlockPolicy`1"/> to use.</param>
            <param name="stagePolicy">The <see cref="T:Libplanet.Blockchain.Policies.IStagePolicy`1"/> to use.</param>
            <param name="genesisBlock">The <see cref="T:Libplanet.Blocks.Block`1"/> to use.</param>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.AppProtocolVersion">
            <summary>
            The application protocol version to comply.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.TrustedAppProtocolVersionSigners">
            <summary>
            The set of <see cref="T:Libplanet.Crypto.PublicKey"/>s to trust when a node encounters
            an <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different from
            <see cref="P:Libplanet.Node.NetworkConfig`1.AppProtocolVersion"/>.  To trust any party,
            set this to <see langword="null"/>.  Set to <see langword="null"/> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.DifferentAppProtocolVersionEncountered">
            <summary>
            The event triggered when a node encounters
            an <see cref="T:Libplanet.Net.AppProtocolVersion"/> that is different from
            <see cref="P:Libplanet.Node.NetworkConfig`1.AppProtocolVersion"/> that is signed by
            a <em>trusted party</em>, that is, one of
            <see cref="P:Libplanet.Node.NetworkConfig`1.TrustedAppProtocolVersionSigners"/>.  Does nothing by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.BlockPolicy">
            <summary>
            The network's policy used to decide which blocks to accept.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.StagePolicy">
            <summary>
            The network's policy used to decide which transactions to accept and when to forget
            them.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NetworkConfig`1.GenesisBlock">
            <summary>
            The genesis <see cref="T:Libplanet.Blocks.Block`1"/> of the network.
            </summary>
        </member>
        <member name="T:Libplanet.Node.NodeConfig`1">
            <summary>
            A node configuration.  Largely comprised of two sub-configurations
            <see cref="T:Libplanet.Node.NetworkConfig`1"/> and <see cref="T:Libplanet.Node.SwarmConfig"/>.
            </summary>
            <typeparam name="T">An <see cref="T:Libplanet.Action.IAction"/> type.  It should match to
            <see cref="T:Libplanet.Blockchain.BlockChain`1"/> and <see cref="T:Libplanet.Net.Swarm`1"/>.</typeparam>
            <seealso cref="T:Libplanet.Node.NetworkConfig`1"/>
            <seealso cref="T:Libplanet.Node.SwarmConfig"/>
        </member>
        <member name="F:Libplanet.Node.NodeConfig`1._privateKey">
            <summary>
            The <see cref="T:Libplanet.Crypto.PrivateKey"/> used for defining the identity of a <see cref="T:Libplanet.Net.Swarm`1"/>.
            </summary>
        </member>
        <member name="M:Libplanet.Node.NodeConfig`1.#ctor(Libplanet.Crypto.PrivateKey,Libplanet.Node.NetworkConfig{`0},Libplanet.Node.SwarmConfig,Libplanet.Store.IStore,Libplanet.Store.IStateStore,System.Collections.Generic.IEnumerable{Libplanet.Blockchain.Renderers.IRenderer{`0}})">
            <summary>
            Initialize a <see cref="T:Libplanet.Node.NodeConfig`1"/> instance.
            </summary>
            <param name="privateKey">The <see cref="T:Libplanet.Crypto.PrivateKey"/> to use to initialize
            a <see cref="T:Libplanet.Net.Swarm`1"/> instance.  This determines the identity of a node
            on the network.</param>
            <param name="networkConfig">The <see cref="T:Libplanet.Node.NetworkConfig`1"/> to use.</param>
            <param name="swarmConfig">The <see cref="T:Libplanet.Node.SwarmConfig"/> to use.</param>
            <param name="store">The <see cref="T:Libplanet.Store.IStore"/> to use for storing chain data.</param>
            <param name="stateStore">The <see cref="T:Libplanet.Store.IStateStore"/> to use for storing state data.
            </param>
            <param name="renderers">The <see cref="T:Libplanet.Blockchain.Renderers.IRenderer`1"/>s for rendering events when
            <see cref="P:Libplanet.Blockchain.BlockChain`1.Tip"/> changes.</param>
        </member>
        <member name="P:Libplanet.Node.NodeConfig`1.NetworkConfig">
            <summary>
            The configuration of the network that a <see cref="T:Libplanet.Net.Swarm`1"/> will participate in.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeConfig`1.SwarmConfig">
            <summary>
            The configuration for the behavior of a <see cref="T:Libplanet.Net.Swarm`1"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeConfig`1.Store">
            <summary>
            The <see cref="T:Libplanet.Store.IStore"/> for storing chain data.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeConfig`1.StateStore">
            <summary>
            The <see cref="T:Libplanet.Store.IStateStore"/> for storing state data.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeConfig`1.Renderers">
            <summary>
            The <see cref="T:Libplanet.Blockchain.Renderers.IRenderer`1"/>s for rendering events when
            <see cref="P:Libplanet.Blockchain.BlockChain`1.Tip"/> changes.
            </summary>
        </member>
        <member name="M:Libplanet.Node.NodeConfig`1.GetBlockChain">
            <summary>
            Creates a new <see cref="T:Libplanet.Blockchain.BlockChain`1"/> instance.
            </summary>
            <returns>A new <see cref="T:Libplanet.Blockchain.BlockChain`1"/> instance.</returns>
        </member>
        <member name="M:Libplanet.Node.NodeConfig`1.GetSwarm">
            <summary>
            Creates a new <see cref="T:Libplanet.Net.Swarm`1"/> instance.
            </summary>
            <returns>A new <see cref="T:Libplanet.Net.Swarm`1"/> instance.</returns>
        </member>
        <member name="T:Libplanet.Node.NodeUtils`1">
            <summary>
            A helper class for creating a new <see cref="T:Libplanet.Blockchain.BlockChain`1"/>.
            </summary>
            <typeparam name="T">An <see cref="T:Libplanet.Action.IAction"/> type.  It should match to
            <seealso cref="T:Libplanet.Blockchain.BlockChain`1"/> and <see cref="T:Libplanet.Net.Swarm`1"/>.</typeparam>
        </member>
        <member name="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy">
            <summary>
            The default <see cref="T:Libplanet.Blockchain.Policies.IBlockPolicy`1"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeUtils`1.DefaultStagePolicy">
            <summary>
            The default <see cref="T:Libplanet.Blockchain.Policies.IStagePolicy`1"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.NodeUtils`1.DefaultStoreUriScheme">
            <summary>
            The default scheme used for storage.
            </summary>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.CreateGenesisBlock">
            <summary>
            Creates an empty genesis <see cref="T:Libplanet.Blocks.Block`1"/> using <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/>
            signed with a random <see cref="T:Libplanet.Crypto.PrivateKey"/>.
            </summary>
            <returns>An empty genesis <see cref="T:Libplanet.Blocks.Block`1"/> using <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/>
            signed with a random <see cref="T:Libplanet.Crypto.PrivateKey"/>.</returns>
            <remarks>
            A <see cref="T:Libplanet.Crypto.PrivateKey"/> used to sign a newly created genesis <see cref="T:Libplanet.Blocks.Block`1"/>
            is ephemeral, i.e. lost after its creation.  This method is mostly for developmental
            purposes and testing.
            </remarks>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.CreateGenesisBlock(Libplanet.Crypto.PrivateKey,Libplanet.Blockchain.Policies.IBlockPolicy{`0})">
            <summary>
            Creates an empty genesis <see cref="T:Libplanet.Blocks.Block`1"/> signed with
            <paramref name="privateKey"/>.
            </summary>
            <param name="privateKey">The <see cref="T:Libplanet.Crypto.PrivateKey"/> to sign the genesis
            <see cref="T:Libplanet.Blocks.Block`1"/> with.</param>
            <param name="blockPolicy">The <see cref="T:Libplanet.Blockchain.Policies.IBlockPolicy`1"/> to use.</param>
            <returns>An empty genesis <see cref="T:Libplanet.Blocks.Block`1"/> signed with
            <paramref name="privateKey"/>.</returns>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.LoadGenesisBlock(System.String)">
            <summary>
            Loads a saved genesis <see cref="T:Libplanet.Blocks.Block`1"/> from <paramref name="path"/>
            using <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/>.
            </summary>
            <param name="path">The location of which a genesis <see cref="T:Libplanet.Blocks.Block`1"/> is saved.
            </param>
            <returns>A genesis <see cref="T:Libplanet.Blocks.Block`1"/> loaded from <paramref name="path"/>
            using <see cref="P:Libplanet.Node.NodeUtils`1.DefaultBlockPolicy"/>.
            </returns>
            <seealso cref="M:Libplanet.Node.NodeUtils`1.SaveGenesisBlock(System.String,Libplanet.Blocks.Block{`0})"/>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.LoadGenesisBlock(System.String,Libplanet.Blockchain.Policies.IBlockPolicy{`0})">
            <summary>
            Loads a saved genesis <see cref="T:Libplanet.Blocks.Block`1"/> from <paramref name="path"/>
            using <paramref name="blockPolicy"/>.
            </summary>
            <param name="path">The location of which a genesis <see cref="T:Libplanet.Blocks.Block`1"/> is saved.
            </param>
            <param name="blockPolicy">The <see cref="T:Libplanet.Blockchain.Policies.IBlockPolicy`1"/> to use when loading
            a saved genesis <see cref="T:Libplanet.Blocks.Block`1"/>.</param>
            <returns>A genesis <see cref="T:Libplanet.Blocks.Block`1"/> loaded from <paramref name="path"/>
            using <paramref name="blockPolicy"/>.
            </returns>
            <remarks>
            When loading, <paramref name="blockPolicy"/> should be applicable, i.e. the saved
            genesis <see cref="T:Libplanet.Blocks.Block`1"/> should not violate <paramref name="blockPolicy"/>.
            Otherwise, this may fail and throw an <see cref="T:System.Exception"/>.
            </remarks>
            <seealso cref="M:Libplanet.Node.NodeUtils`1.SaveGenesisBlock(System.String,Libplanet.Blocks.Block{`0})"/>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.SaveGenesisBlock(System.String,Libplanet.Blocks.Block{`0})">
            <summary>
            Saves a genesis <see cref="T:Libplanet.Blocks.Block`1"/> to <paramref name="path"/>.
            </summary>
            <param name="path">The location of which <paramref name="genesisBlock"/>
            is to be saved. </param>
            <param name="genesisBlock">The genesis <see cref="T:Libplanet.Blocks.Block`1"/> to save.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="genesisBlock"/>
            is not a genesis <see cref="T:Libplanet.Blocks.Block`1"/>, i.e. does not have an index of 0, or
            a file already exists at <paramref name="path"/>.</exception>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.LoadStore(System.String)">
            <summary>
            Loads a pair of <see cref="T:Libplanet.Store.IStore"/> and <see cref="T:Libplanet.Store.IStateStore"/>
            from <paramref name="path"/>.  See <see cref="T:Libplanet.Store.StoreLoaderAttribute"/>
            for more information.
            </summary>
            <param name="path">The location of which <see cref="T:Libplanet.Store.IStore"/> and
            <see cref="T:Libplanet.Store.IStateStore"/> are saved.</param>
            <returns>A pair of <see cref="T:Libplanet.Store.IStore"/> and <see cref="T:Libplanet.Store.IStateStore"/>
            loaded from <paramref name="path"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if stores can't be loaded from
            <paramref name="path"/>.</exception>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.LoadStore(System.Uri)">
            <summary>
            Loads a pair of <see cref="T:Libplanet.Store.IStore"/> and <see cref="T:Libplanet.Store.IStateStore"/>
            with <paramref name="uri"/>.  See <see cref="T:Libplanet.Store.StoreLoaderAttribute"/>
            for more information.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to use when locating and loading
            <see cref="T:Libplanet.Store.IStore"/> and <see cref="T:Libplanet.Store.IStateStore"/>.</param>
            <returns>A pair of <see cref="T:Libplanet.Store.IStore"/> and <see cref="T:Libplanet.Store.IStateStore"/>
            loaded with <paramref name="uri"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if stores can't be loaded with
            <paramref name="uri"/>.</exception>
            <seealso cref="T:Libplanet.Store.StoreLoaderAttribute"/>.
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.LoadPrivateKey(System.String)">
            <summary>
            Loads a <see cref="T:Libplanet.Crypto.PrivateKey"/> from <paramref name="path"/>.
            </summary>
            <param name="path">The location of which a <see cref="T:Libplanet.Crypto.PrivateKey"/> is saved.</param>
            <returns>A <see cref="T:Libplanet.Crypto.PrivateKey"/> loaded from <paramref name="path"/>.</returns>
        </member>
        <member name="M:Libplanet.Node.NodeUtils`1.SavePrivateKey(System.String,Libplanet.Crypto.PrivateKey)">
            <summary>
            Saves a <see cref="T:Libplanet.Crypto.PrivateKey"/> from <paramref name="path"/>.
            </summary>
            <param name="path">The location of which a <see cref="T:Libplanet.Crypto.PrivateKey"/> is to be saved.
            </param>
            <param name="privateKey">The <see cref="T:Libplanet.Crypto.PrivateKey"/> to save.</param>
            <exception cref="T:System.ArgumentException">Thrown when a file already exists
            at <paramref name="path"/>.</exception>
        </member>
        <member name="T:Libplanet.Node.PreloadConfig">
            <summary>
            Various options for a <see cref="T:Libplanet.Net.Swarm`1"/>'s preloading phase.
            </summary>
        </member>
        <member name="P:Libplanet.Node.PreloadConfig.Render">
            <summary>
            Determines whether to call renderers during the preloading phase.
            Set to <c>false</c> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.PreloadConfig.DeltaThreshold">
            <summary>
            Determines when to stop preloading. Preloading is considered complete when
            the delta between the local node's tip index and the best known tip
            index is less than or equal to this value. Set to <c>10L</c> by default.
            </summary>
        </member>
        <member name="P:Libplanet.Node.PreloadConfig.DialTimeout">
            <summary>
            Determines how long to wait for dial responses during the preloading phase.
            </summary>
        </member>
        <member name="T:Libplanet.Node.SwarmConfig">
            <summary>
            A <see cref="T:Libplanet.Net.Swarm`1"/> configuration.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SwarmConfig.InitConfig">
            <summary>
            The <see cref="P:Libplanet.Node.SwarmConfig.InitConfig"/> to use.
            </summary>
            <seealso cref="P:Libplanet.Node.SwarmConfig.InitConfig"/>
        </member>
        <member name="P:Libplanet.Node.SwarmConfig.BootstrapConfig">
            <summary>
            The <see cref="P:Libplanet.Node.SwarmConfig.BootstrapConfig"/> to use.
            </summary>
            <seealso cref="P:Libplanet.Node.SwarmConfig.BootstrapConfig"/>
        </member>
        <member name="P:Libplanet.Node.SwarmConfig.PreloadConfig">
            <summary>
            The <see cref="P:Libplanet.Node.SwarmConfig.PreloadConfig"/> to use.
            </summary>
            <seealso cref="P:Libplanet.Node.SwarmConfig.PreloadConfig"/>
        </member>
        <member name="P:Libplanet.Node.SwarmConfig.SyncConfig">
            <summary>
            The <see cref="P:Libplanet.Node.SwarmConfig.SyncConfig"/> to use.
            </summary>
        </member>
        <member name="M:Libplanet.Node.SwarmConfig.FromJson(System.String)">
            <summary>
            Instantiate a <see cref="T:Libplanet.Node.SwarmConfig"/> instance from a json <see cref="T:System.String"/>.
            </summary>
            <param name="jsonString">The json <see cref="T:System.String"/> to parse.</param>
            <returns>The <see cref="T:Libplanet.Node.SwarmConfig"/> instance parsed from
            <paramref name="jsonString"/>.</returns>
        </member>
        <member name="M:Libplanet.Node.SwarmConfig.ToSwarmOptions">
            <summary>
            Creates a <see cref="T:Libplanet.Net.SwarmOptions"/> instance.
            </summary>
            <returns>The <see cref="T:Libplanet.Net.SwarmOptions"/> instance.</returns>
        </member>
        <member name="M:Libplanet.Node.SwarmConfig.ToJson">
            <summary>
            Converts the instance into a json <see cref="T:System.String"/>.
            </summary>
            <returns>A json <see cref="T:System.String"/> representation of this <see cref="T:Libplanet.Node.SwarmConfig"/>.
            </returns>
        </member>
        <member name="T:Libplanet.Node.SyncConfig">
            <summary>
            Various options for a <see cref="T:Libplanet.Net.Swarm`1"/>'s sync phase.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.TipLifespan">
            <summary>
            Determines the lifespan of a tip.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.DialTimeout">
            <summary>
            Determines how long to wait for dial responses during the syncing phase.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.BlockBroadcastInterval">
            <summary>
            Determines how often to broadcast <see cref="T:Libplanet.Net.Messages.BlockHeaderMessage"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.TxBroadcastInterval">
            <summary>
            Determines how often to broadcast <see cref="T:Libplanet.Net.Messages.TxIds"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.StaticPeers">
            <summary>
            A list of <see cref="T:Libplanet.Net.BoundPeer"/>s to be treated as static.
            </summary>
            <remarks>
            Despite its name, static peers are not truly static in the sense that it is not kept
            in a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/>. <see cref="P:Libplanet.Node.SyncConfig.StaticPeers"/> are artificially added
            to a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> periodically.
            </remarks>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.StaticPeersMaintainPeriod">
            <summary>
            Determines how often a <see cref="T:Libplanet.Net.BoundPeer"/> from <see cref="P:Libplanet.Node.SyncConfig.StaticPeers"/> is
            artificially added to a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/>.
            </summary>
            <remarks>
            A static <see cref="T:Libplanet.Net.BoundPeer"/> is only added to a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> if
            the dialing is successful, just like any other normal <see cref="T:Libplanet.Net.BoundPeer"/>.
            </remarks>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.RoutingTableRefreshPeriod">
            <summary>
            Determines how often a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/> gets refreshed.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.RoutingTableBoundPeerLifespan">
            <summary>
            Determines the lifespan of a <see cref="T:Libplanet.Net.BoundPeer"/> in a <see cref="T:Libplanet.Net.Protocols.RoutingTable"/>.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.MaximumPollNumPeers">
            <summary>
            Determines the maximum number of <see cref="T:Libplanet.Net.BoundPeer"/>s to poll when pulling
            blocks.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.MinimumBroadcastNumPeers">
            <summary>
            Determines the minimum number of <see cref="T:Libplanet.Net.BoundPeer"/>s to broadcast.
            </summary>
        </member>
        <member name="P:Libplanet.Node.SyncConfig.BlockDemandLifespan">
            <summary>
            Determines the lifespan of blocks in <see cref="T:Libplanet.Net.BlockDemandTable`1"/>.
            </summary>
        </member>
        <member name="T:Libplanet.Node.UntypedBlock">
            <summary>
            Untyped equivalent of <see cref="T:Libplanet.Blocks.Block`1"/>.  It's guaranteed that all proofs are valid.
            </summary>
        </member>
        <member name="M:Libplanet.Node.UntypedBlock.#ctor(Libplanet.Blocks.IBlockHeader,System.Collections.Generic.IEnumerable{Libplanet.Node.UntypedTransaction})">
            <summary>
            Creates an <see cref="T:Libplanet.Node.UntypedBlock"/> instance.
            </summary>
            <param name="header">A block header without transactions.</param>
            <param name="untypedTransactions">A list of transactions.  Ordering does not matter.
            </param>
            <exception cref="T:Libplanet.Tx.InvalidTxNonceException">Thrown when the same tx nonce is used by
            a signer twice or more, or a tx nonce is used without its previous nonce by a signer.
            Note that this validates only a block's intrinsic integrity between its transactions,
            but does not guarantee integrity between blocks.  Such validation needs to be conducted
            by <see cref="T:Libplanet.Blockchain.BlockChain`1"/>.</exception>
            <exception cref="T:Libplanet.Tx.InvalidTxGenesisHashException">Thrown when transactions to set have
            inconsistent genesis hashes.</exception>
            <exception cref="T:Libplanet.Blocks.InvalidBlockTxHashException">Thrown when the given
            <paramref name="header"/>'s <see cref="P:Libplanet.Blocks.IBlockMetadata.TxHash"/> is invalid.</exception>
        </member>
        <member name="M:Libplanet.Node.UntypedBlock.#ctor(Libplanet.Blocks.HashAlgorithmGetter,Bencodex.Types.Dictionary)">
            <summary>
            Decodes a Bencodex <paramref name="dictionary"/> into an <see cref="T:Libplanet.Node.UntypedBlock"/>
            instance.
            </summary>
            <param name="hashAlgorithmGetter">A function to determine the hash algorithm used
            for the block to decode.  See also <see cref="M:Libplanet.Blockchain.Policies.IBlockPolicy`1.GetHashAlgorithm(System.Int64)"/>
            method.</param>
            <param name="dictionary">A Bencodex dictionary made using <see cref="M:Libplanet.Node.UntypedBlock.ToBencodex"/>
            method or <see cref="M:Libplanet.Blocks.BlockMarshaler.MarshalBlock``1(Libplanet.Blocks.Block{``0})"/> method.</param>
            <seealso cref="M:Libplanet.Node.UntypedBlock.ToBencodex"/>
            <seealso cref="M:Libplanet.Blocks.BlockMarshaler.MarshalBlock``1(Libplanet.Blocks.Block{``0})"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.ProtocolVersion">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.ProtocolVersion"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.HashAlgorithm">
            <inheritdoc cref="P:Libplanet.Blocks.IPreEvaluationBlockHeader.HashAlgorithm"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Index">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.Index"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Timestamp">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.Timestamp"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Nonce">
            <inheritdoc cref="P:Libplanet.Blocks.IPreEvaluationBlockHeader.Nonce"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Miner">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.Miner"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.PublicKey">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.PublicKey"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Difficulty">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.Difficulty"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.TotalDifficulty">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.TotalDifficulty"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.PreviousHash">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.PreviousHash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.TxHash">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockMetadata.TxHash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Signature">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockHeader.Signature"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.PreEvaluationHash">
            <inheritdoc cref="P:Libplanet.Blocks.IPreEvaluationBlockHeader.PreEvaluationHash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.StateRootHash">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockHeader.StateRootHash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.Hash">
            <inheritdoc cref="P:Libplanet.Blocks.IBlockExcerpt.Hash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedBlock.UntypedTransactions">
            <summary>
            The list of untyped transactions belonging to the block.
            </summary>
            <remarks>This is always ordered by <see cref="P:Libplanet.Node.UntypedTransaction.Id"/>.</remarks>
        </member>
        <member name="M:Libplanet.Node.UntypedBlock.ToBencodex">
            <summary>
            Encodes this block into a Bencodex dictionary.
            </summary>
            <returns>A Bencodex dictionary which encodes this block.  This is equivalent to
            <see cref="M:Libplanet.Blocks.BlockMarshaler.MarshalBlock``1(Libplanet.Blocks.Block{``0})"/> method's return value.
            This can be decoded back to <see cref="T:Libplanet.Node.UntypedBlock"/> using
            <see cref="M:Libplanet.Node.UntypedBlock.#ctor(Libplanet.Blocks.HashAlgorithmGetter,Bencodex.Types.Dictionary)"/> constructor or
            <see cref="M:Libplanet.Blocks.BlockMarshaler.UnmarshalBlock``1(Libplanet.Blocks.HashAlgorithmGetter,Bencodex.Types.Dictionary)"/>
            method.</returns>
            <seealso cref="M:Libplanet.Node.UntypedBlock.#ctor(Libplanet.Blocks.HashAlgorithmGetter,Bencodex.Types.Dictionary)"/>
            <seealso cref="M:Libplanet.Blocks.BlockMarshaler.UnmarshalBlock``1(Libplanet.Blocks.HashAlgorithmGetter,Bencodex.Types.Dictionary)"/>
        </member>
        <member name="M:Libplanet.Node.UntypedBlock.DeriveTxHash(System.Collections.Generic.IReadOnlyList{Libplanet.Node.UntypedTransaction})">
            <summary>
            Derives <see cref="P:Libplanet.Node.UntypedBlock.TxHash"/> from the given <paramref name="transactions"/>.
            </summary>
            <param name="transactions">The transactions to derive <see cref="P:Libplanet.Node.UntypedBlock.TxHash"/> from.
            This must be ordered by <see cref="T:Libplanet.Tx.TxId"/>.</param>
            <returns>The derived <see cref="P:Libplanet.Node.UntypedBlock.TxHash"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="transactions"/> are
            not ordered by their <see cref="T:Libplanet.Tx.TxId"/>s.</exception>
        </member>
        <member name="T:Libplanet.Node.UntypedTransaction">
            <summary>
            Untyped equivalent of <see cref="T:Libplanet.Tx.Transaction`1"/>.  It's guaranteed that the transaction
            is properly signed.
            </summary>
        </member>
        <member name="M:Libplanet.Node.UntypedTransaction.#ctor(Libplanet.Tx.ITxMetadata,System.Collections.Generic.IEnumerable{Bencodex.Types.IValue},System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Creates an <see cref="T:Libplanet.Node.UntypedTransaction"/> instance.
            </summary>
            <param name="metadata">A transaction metadata without actions and signature.</param>
            <param name="actionValues">A list of <see cref="P:Libplanet.Action.IAction.PlainValue"/>s.</param>
            <param name="signature">A signature made by transaction's signer.</param>
            <exception cref="T:Libplanet.Tx.InvalidTxSignatureException">Thrown when
            the <paramref name="signature"/> is invalid.</exception>
        </member>
        <member name="M:Libplanet.Node.UntypedTransaction.#ctor(Bencodex.Types.Dictionary)">
            <summary>
            Creates an <see cref="T:Libplanet.Node.UntypedTransaction"/> instance from a Bencodex
            <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">A Bencodex dictionary made using <see cref="M:Libplanet.Node.UntypedTransaction.ToBencodex"/>
            method.</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the given
            <paramref name="dictionary"/> lacks some fields.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the given
            <paramref name="dictionary"/> has some invalid values.</exception>
            <exception cref="T:Libplanet.Tx.InvalidTxSignatureException">Thrown when the signature is invalid.
            </exception>
            <seealso cref="M:Libplanet.Node.UntypedTransaction.ToBencodex"/>
            <seealso cref="M:Libplanet.Tx.Transaction`1.ToBencodex(System.Boolean)"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.Id">
            <inheritdoc cref="P:Libplanet.Tx.ITxExcerpt.Id"/>
            <seealso cref="P:Libplanet.Tx.Transaction`1.Id"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.Nonce">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.Nonce"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.Signer">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.Signer"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.UpdatedAddresses">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.UpdatedAddresses"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.Timestamp">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.Timestamp"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.PublicKey">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.PublicKey"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.GenesisHash">
            <inheritdoc cref="P:Libplanet.Tx.ITxMetadata.GenesisHash"/>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.ActionValues">
            <summary>
            A list of <see cref="P:Libplanet.Action.IAction.PlainValue"/>s.
            </summary>
        </member>
        <member name="P:Libplanet.Node.UntypedTransaction.Signature">
            <summary>
            A <see cref="P:Libplanet.Node.UntypedTransaction.Signer"/>'s signature on this transaction.
            </summary>
        </member>
        <member name="M:Libplanet.Node.UntypedTransaction.ToBencodex">
            <summary>
            Builds a Bencodex dictionary used for calculating <see cref="T:Libplanet.Tx.TxId"/>.
            </summary>
            <returns>A Bencodex dictionary that this transaction turns into.
            This can be deserialized using
            <see cref="M:Libplanet.Node.UntypedTransaction.#ctor(Bencodex.Types.Dictionary)"/> method or
            <see cref="M:Libplanet.Tx.Transaction`1.#ctor(Bencodex.Types.Dictionary)"/> method.
            </returns>
            <seealso cref="M:Libplanet.Node.UntypedTransaction.#ctor(Bencodex.Types.Dictionary)"/>
            <seealso cref="M:Libplanet.Tx.Transaction`1.#ctor(Bencodex.Types.Dictionary)"/>
        </member>
    </members>
</doc>
